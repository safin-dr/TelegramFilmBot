import typing as tp

from aiogram import F, Router, types
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery
import aiohttp

import telegram.keyboard as kb
import database.requests as rq
from telegram.utils import get_movie_string, get_extra_links
from web.http_operations import get_movie_info_by_name, get_movie_google_links_by_name
from web.storage_classes import Movie


router: Router = Router()


@router.message(CommandStart())
async def command_start(message: Message) -> None:
    await message.answer(f"–î–æ–±—Ä—ã–π –¥–µ–Ω—å, —É–≤–∞–∂–∞–µ–º—ã–π {message.from_user.first_name}!\n\n –ß—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç —Å–µ–≥–æ–¥–Ω—è?",
                         reply_markup=kb.main, parse_mode="Markdown")


@router.message(F.text == '–ü–æ–º–æ—â—å')
async def text_help(message: Message) -> None:
    await command_help(message)


@router.message(Command("help"))
async def command_help(message: Message) -> None:
    await message.reply("–í—ã –æ–±—Ä–∞—Ç–∏–ª–∏—Å—å –∑–∞ –ø–æ–º–æ—â—å—é, —ç—Ç–æ —É–∂–µ –±–æ–ª—å—à–æ–π —à–∞–≥! –Ø —É–º–µ—é: \n \
                        \nü§ìüëâ –°–µ—Ä—Ñ–∏—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –≤ –ø–æ–∏—Å–∫–∞—Ö –∂–µ–ª–∞–µ–º–æ–≥–æ —Ñ–∏–ª—å–º–∞ –∏–ª–∏ —Å–µ—Ä–∏–∞–ª–∞ –Ω–∞–∑–≤–∞–Ω–∏—é, \n \
                        \nüòàü§å –í—ã–¥–∞–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –í–∞—à–∏—Ö –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ –∫–æ–º–∞–Ω–¥–µ '/history', \n \
                        \nü§ñü§ô –í—ã–¥–∞–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –í–∞—à–∏—Ö –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ –∫–æ–º–∞–Ω–¥–µ '/stats'",
                        reply_markup=kb.help_buttons,
                        parse_mode="Markdown")


@router.callback_query(F.data == 'search')
async def callback_search(callback: CallbackQuery) -> None:
    await callback.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∂–µ–ª–∞–µ–º–æ–≥–æ —Ñ–∏–ª—å–º–∞.')


@router.callback_query(F.data == 'history')
async def callback_history(callback: CallbackQuery) -> None:
    await callback.answer("–≠—Ç–æ –±—ã–ª –ø—Ä–∞–Ω–∫ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π, –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞–∂–º–∏—Ç–µ '/history'.")


@router.callback_query(F.data == 'stats')
async def callback_stats(callback: CallbackQuery) -> None:
    await callback.answer("–≠—Ç–æ –±—ã–ª –ø—Ä–∞–Ω–∫ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π, –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞–∂–º–∏—Ç–µ '/stats'.")


@router.message(F.text == '–ú–æ—è –∏—Å—Ç–æ—Ä–∏—è')
async def text_history(message: Message) -> None:
    await command_history(message)


@router.message(Command("history"))
async def command_history(message: Message) -> None:
    await message.reply("–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –Ω–∞–≤–µ—Ä–Ω—è–∫–∞ –æ—á–µ–Ω—å –≥–ª—É–±–æ–∫–∞—è –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è!")
    history: str = "–í–æ—Ç —á—Ç–æ –º–æ–≥—É —Å–∫–∞–∑–∞—Ç—å –ø–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–∞–º: \n"
    history_lines: list[tuple[str, tp.Any]] = await rq.get_history(message.from_user.id, 20)
    for line in history_lines:
        history += "\nüõú–ó–∞–ø—Ä–æ—Å:  " + str(line[0]) + "\n‚è∞ –í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞:  " + str(line[1]) + "\n"
    await message.answer(history)


@router.message(F.text == '–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
async def text_stats(message: Message) -> None:
    await command_stats(message)


@router.message(Command("stats"))
async def command_stats(message: Message) -> None:
    await message.reply("–ü–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –∫–∞–∂–¥—ã–π –≤—Ç–æ—Ä–æ–π —è–≤–ª—è–µ—Ç—Å—è –±–æ—Ç–æ–º. –ß—É—Ä —è –Ω–µ –±–æ—Ç")
    history: str = "–í–æ—Ç —á—Ç–æ –º–æ–≥—É —Å–∫–∞–∑–∞—Ç—å –ø–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –í–∞—à–∏—Ö –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: \n"
    history_lines = await rq.get_stats(message.from_user.id, 30)
    for line in history_lines:
        history += "\nüé• –§–∏–ª—å–º:  " + str(line[0]) + "\n‚ùì –ó–∞–ø—Ä–∞—à–∏–≤–∞–ª—Å—è "
        if (line[1] % 10 in {2, 3, 4}):
            history += str(line[1]) + " —Ä–∞–∑–∞ \n"
        else:
            history += str(line[1]) + " —Ä–∞–∑ \n"
    await message.answer(history)


@router.message(Command("search"))
async def text_search(message: Message) -> None:
    await search_mode(message)


@router.message(F.text == "–ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞, —Å–µ—Ä–∏–∞–ª–∞")
async def search_mode(message: Message) -> None:
    await message.answer('–ß—Ç–æ –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å?')


@router.message()
async def get_movie_responce(message: Message) -> None:
    async with aiohttp.ClientSession() as session:
        movie: Movie = await get_movie_info_by_name(session=session, name=message.text)
        if movie is not None:
            await rq.set_request(user_id=message.from_user.id, query=message.text, title=movie.name)
            links: list[str] = await get_movie_google_links_by_name(session=session, name=message.text)
            movie.main_link = links[0]
            if links[1]:
                movie.second_link = links[1]
            if links[2]:
                movie.reserve_link1 = links[2]
            if links[3]:
                movie.reserve_link2 = links[3]
            if links[4]:
                movie.reserve_link3 = links[4]
            if movie.picture_url:
                await message.reply_photo(types.URLInputFile(movie.picture_url), caption=get_movie_string(movie))
            else:
                await message.reply(get_movie_string(movie))
            await message.answer(get_extra_links(movie))
        else:
            await message.reply("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º–Ω–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –í–∞—à –∑–∞–ø—Ä–æ—Å üò≠üò≠üò≠")
